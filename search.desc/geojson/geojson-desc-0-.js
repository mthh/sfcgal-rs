searchState.loadedDescShard("geojson", 0, "Introduction\nRepresents a JSON array.\nBounding Boxes\nRepresents a JSON boolean.\nFeature Objects\nFeature Collection Objects\nEnumerates individual Features from a GeoJSON …\nWrite Features to a FeatureCollection\nGeoJSON Objects\nGeometry Objects\nGeometryCollection\nLineString\nMultiLineString\nMultiPoint\nMultiPolygon\nRepresents a JSON null value.\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON object.\nPoint\nPolygon\nPositions\nRepresents a JSON string.\nThe underlying value for a <code>Geometry</code>.\nBounding Box\nBounding Box\nBounding Box\nReturn true iff this key is set\nBuild your struct from GeoJSON using <code>serde</code>\nDeserialize the features of FeatureCollection into your …\nModule for all GeoJSON-related errors\nIterate over the individual <code>Feature</code>s of a …\nWrites the closing syntax for the FeatureCollection.\nFlush the underlying writer buffer.\nForeign Members\nForeign Members\nForeign Members\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from <code>geo_types::Geometry</code> enums\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a JSON Value into a GeoJson object.\nCreate a FeatureReader from the given <code>reader</code>.\nCreate a FeatureWriter from the given <code>writer</code>.\nGeometry\nIdentifier\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe number of properties\nReturns a new <code>Geometry</code> with the specified <code>value</code>. <code>bbox</code> and …\nProperties\nReturns an iterator over all the properties\nReturn the value of this property, if it’s set\nA shortcut for producing <code>geo_types</code> GeometryCollection …\nRemoves a key from the <code>properties</code> map, returning the value …\nWrite your struct to GeoJSON using <code>serde</code>\nSerialize your own custom struct to the features of a …\nSet a property to this value, overwriting any possible …\nConvenience method to convert to a JSON Value. Uses <code>From</code>.\nConvenience wrapper for serde_json::to_string_pretty()\nWrite a <code>crate::Feature</code> struct to the output stream. If you…\nWrite a foreign member to the output stream. This must be …\nDeserialize a GeoJSON FeatureCollection into your custom …\nBuild a <code>Vec</code> of structs from a GeoJson <code>&amp;str</code>.\nBuild a <code>Vec</code> of structs from a GeoJson reader.\nDeserialize a GeoJSON FeatureCollection into <code>Feature</code> …\n<code>serde::deserialize_with</code> helper to deserialize a GeoJSON …\n<code>serde::deserialize_with</code> helper to deserialize an optional …\nDeserialize a single GeoJSON Feature into your custom …\nInterpret a <code>Feature</code> as an instance of type <code>T</code>.\nThis was previously <code>GeoJsonUnknownType</code>, but has been split …\nContains the error value\nErrors which can occur when encoding, decoding, and …\nThis was previously <code>GeoJsonUnknownType</code>, but has been split …\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFeature identifier\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>serde::serialize_with</code> helper to serialize a type like a …\n<code>serde::serialize_with</code> helper to serialize an optional type …\nConvert a <code>T</code> into a <code>Feature</code>.\nSerialize a single data structure to a GeoJSON Feature …\nSerialize elements to a GeoJSON FeatureCollection byte …\nSerialize elements to a GeoJSON FeatureCollection string.\nSerialize elements as a GeoJSON FeatureCollection into the …\nSerialize a single data structure to a GeoJSON Feature …\nSerialize a single data structure as a GeoJSON Feature …")